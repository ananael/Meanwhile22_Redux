//
// M22HomeAnimationView.m
// Generated by Core Animator version 1.3.2 on 11/21/16.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

#import "M22HomeAnimationView.h"

@interface M22HomeAnimationPassthroughView : UIView
@end
@implementation M22HomeAnimationPassthroughView
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event {
    for ( UIView *subview in self.subviews ) {
        if ( [subview pointInside:[self convertPoint:point toView:subview] withEvent:event]) { return true; }
    }
    return false;
}
@end

@interface M22HomeAnimationView ()
@property (strong, nonatomic) NSMapTable *completionBlocksByAnimation;
@end

@implementation M22HomeAnimationView

#pragma mark - Life Cycle

- (instancetype)init
{
	return [self initWithFrame:CGRectMake(0,0,2048,2048)];
}

- (instancetype)initWithFrame:(CGRect)frame
{
	self = [super initWithFrame:frame];
	if (self)
	{
		[self setupHierarchy];
	}
	return self;
}

- (instancetype)initWithCoder:(NSCoder *)coder
{
	self = [super initWithCoder:coder];
	if (self)
	{
		[self setupHierarchy];
	}
	return self;
}

#pragma mark - Scaling

- (void)layoutSubviews
{
	[super layoutSubviews];

	UIView *scalingView = self.viewsByName[@"__scaling__"];
	float xScale = self.bounds.size.width / scalingView.bounds.size.width;
	float yScale = self.bounds.size.height / scalingView.bounds.size.height;
	switch (self.contentMode) {
		case UIViewContentModeScaleToFill:
			break;
		case UIViewContentModeScaleAspectFill:
		{
			float scale = MAX(xScale, yScale);
			xScale = scale;
			yScale = scale;
			break;
		}
		default:
		{
			float scale = MIN(xScale, yScale);
			xScale = scale;
			yScale = scale;
			break;
		}
	}
	scalingView.transform = CGAffineTransformMakeScale(xScale, yScale);
	scalingView.center = CGPointMake(CGRectGetMidX(self.bounds), CGRectGetMidY(self.bounds));
}

#pragma mark - Setup

- (void)setupHierarchy
{
	self.completionBlocksByAnimation = [NSMapTable mapTableWithKeyOptions:NSPointerFunctionsOpaqueMemory valueOptions:NSPointerFunctionsStrongMemory];
	NSMutableDictionary *viewsByName = [NSMutableDictionary dictionary];
	NSBundle *bundle = [NSBundle bundleForClass:[self class]];

	UIView *__scaling__ = [UIView new];
	__scaling__.bounds = CGRectMake(0, 0, 2048, 2048);
	__scaling__.center = CGPointMake(1024.0, 1024.0);
	__scaling__.layer.masksToBounds = YES;
	[self addSubview:__scaling__];
	viewsByName[@"__scaling__"] = __scaling__;

	M22HomeAnimationPassthroughView *m22Logo__root = [M22HomeAnimationPassthroughView new];
	M22HomeAnimationPassthroughView *m22Logo__xScale = [M22HomeAnimationPassthroughView new];
	M22HomeAnimationPassthroughView *m22Logo__yScale = [M22HomeAnimationPassthroughView new];
	UIImageView *m22Logo = [UIImageView new];
	UIImage *imgM22Logo = [UIImage imageNamed:@"M22 Logo.png" inBundle:bundle compatibleWithTraitCollection:nil];
	if ( imgM22Logo == nil ) { NSLog(@"** Warning: Could not create image from 'M22 Logo.png'."); }
	m22Logo.image = imgM22Logo;
	m22Logo.contentMode = UIViewContentModeCenter;
	m22Logo.bounds = CGRectMake(0, 0, 1422.0, 1422.0);
	m22Logo__root.layer.position = CGPointMake(1024.000, 1024.000);
	m22Logo__xScale.transform = CGAffineTransformMakeScale(1.44, 1.00);
	m22Logo__yScale.transform = CGAffineTransformMakeScale(1.00, 1.44);
	m22Logo__root.transform = CGAffineTransformMakeRotation(0.000);
	[__scaling__ addSubview:m22Logo__root];
	[m22Logo__root addSubview:m22Logo__xScale];
	[m22Logo__xScale addSubview:m22Logo__yScale];
	[m22Logo__yScale addSubview:m22Logo];
	[__scaling__ addSubview:m22Logo__root];
	viewsByName[@"M22 Logo__root"] = m22Logo__root;
	viewsByName[@"M22 Logo__xScale"] = m22Logo__xScale;
	viewsByName[@"M22 Logo__yScale"] = m22Logo__yScale;
	viewsByName[@"M22 Logo"] = m22Logo;

	M22HomeAnimationPassthroughView *starBlur__root = [M22HomeAnimationPassthroughView new];
	M22HomeAnimationPassthroughView *starBlur__xScale = [M22HomeAnimationPassthroughView new];
	M22HomeAnimationPassthroughView *starBlur__yScale = [M22HomeAnimationPassthroughView new];
	UIImageView *starBlur = [UIImageView new];
	UIImage *imgStarBlur = [UIImage imageNamed:@"star blur.png" inBundle:bundle compatibleWithTraitCollection:nil];
	if ( imgStarBlur == nil ) { NSLog(@"** Warning: Could not create image from 'star blur.png'."); }
	starBlur.image = imgStarBlur;
	starBlur.contentMode = UIViewContentModeCenter;
	starBlur.bounds = CGRectMake(0, 0, 539.0, 446.0);
	starBlur__root.layer.position = CGPointMake(344.081, 1899.177);
	starBlur__xScale.transform = CGAffineTransformMakeScale(0.86, 1.00);
	starBlur__yScale.transform = CGAffineTransformMakeScale(1.00, 0.78);
	starBlur__root.transform = CGAffineTransformMakeRotation(0.000);
	[__scaling__ addSubview:starBlur__root];
	[starBlur__root addSubview:starBlur__xScale];
	[starBlur__xScale addSubview:starBlur__yScale];
	[starBlur__yScale addSubview:starBlur];
	[__scaling__ addSubview:starBlur__root];
	viewsByName[@"star blur__root"] = starBlur__root;
	viewsByName[@"star blur__xScale"] = starBlur__xScale;
	viewsByName[@"star blur__yScale"] = starBlur__yScale;
	viewsByName[@"star blur"] = starBlur;

	M22HomeAnimationPassthroughView *birdBlur__root = [M22HomeAnimationPassthroughView new];
	M22HomeAnimationPassthroughView *birdBlur__xScale = [M22HomeAnimationPassthroughView new];
	M22HomeAnimationPassthroughView *birdBlur__yScale = [M22HomeAnimationPassthroughView new];
	UIImageView *birdBlur = [UIImageView new];
	UIImage *imgBirdBlur = [UIImage imageNamed:@"bird blur.png" inBundle:bundle compatibleWithTraitCollection:nil];
	if ( imgBirdBlur == nil ) { NSLog(@"** Warning: Could not create image from 'bird blur.png'."); }
	birdBlur.image = imgBirdBlur;
	birdBlur.contentMode = UIViewContentModeCenter;
	birdBlur.bounds = CGRectMake(0, 0, 962.0, 536.0);
	birdBlur__root.layer.position = CGPointMake(1695.344, 1867.307);
	birdBlur__xScale.transform = CGAffineTransformMakeScale(0.76, 1.00);
	birdBlur__yScale.transform = CGAffineTransformMakeScale(1.00, 0.77);
	birdBlur__root.transform = CGAffineTransformMakeRotation(0.000);
	[__scaling__ addSubview:birdBlur__root];
	[birdBlur__root addSubview:birdBlur__xScale];
	[birdBlur__xScale addSubview:birdBlur__yScale];
	[birdBlur__yScale addSubview:birdBlur];
	[__scaling__ addSubview:birdBlur__root];
	viewsByName[@"bird blur__root"] = birdBlur__root;
	viewsByName[@"bird blur__xScale"] = birdBlur__xScale;
	viewsByName[@"bird blur__yScale"] = birdBlur__yScale;
	viewsByName[@"bird blur"] = birdBlur;

	M22HomeAnimationPassthroughView *boltBlur__root = [M22HomeAnimationPassthroughView new];
	M22HomeAnimationPassthroughView *boltBlur__xScale = [M22HomeAnimationPassthroughView new];
	M22HomeAnimationPassthroughView *boltBlur__yScale = [M22HomeAnimationPassthroughView new];
	UIImageView *boltBlur = [UIImageView new];
	UIImage *imgBoltBlur = [UIImage imageNamed:@"bolt blur.png" inBundle:bundle compatibleWithTraitCollection:nil];
	if ( imgBoltBlur == nil ) { NSLog(@"** Warning: Could not create image from 'bolt blur.png'."); }
	boltBlur.image = imgBoltBlur;
	boltBlur.contentMode = UIViewContentModeCenter;
	boltBlur.bounds = CGRectMake(0, 0, 374.0, 465.0);
	boltBlur__root.layer.position = CGPointMake(992.240, 1895.393);
	boltBlur__xScale.transform = CGAffineTransformMakeScale(0.84, 1.00);
	boltBlur__yScale.transform = CGAffineTransformMakeScale(1.00, 0.76);
	boltBlur__root.transform = CGAffineTransformMakeRotation(0.000);
	[__scaling__ addSubview:boltBlur__root];
	[boltBlur__root addSubview:boltBlur__xScale];
	[boltBlur__xScale addSubview:boltBlur__yScale];
	[boltBlur__yScale addSubview:boltBlur];
	[__scaling__ addSubview:boltBlur__root];
	viewsByName[@"bolt blur__root"] = boltBlur__root;
	viewsByName[@"bolt blur__xScale"] = boltBlur__xScale;
	viewsByName[@"bolt blur__yScale"] = boltBlur__yScale;
	viewsByName[@"bolt blur"] = boltBlur;

	self.viewsByName = viewsByName;
}

#pragma mark - M22HomeAnimation

- (void)addM22HomeAnimation
{
	[self addM22HomeAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:NULL];
}

- (void)addM22HomeAnimationWithCompletion:(void (^)(BOOL finished))completionBlock
{
	[self addM22HomeAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:completionBlock];
}

- (void)addM22HomeAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion
{
	[self addM22HomeAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:NULL];
}

- (void)addM22HomeAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	[self addM22HomeAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:completionBlock];
}

- (void)addM22HomeAnimationWithBeginTime:(CFTimeInterval)beginTime andFillMode:(NSString *)fillMode andRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	CAMediaTimingFunction *linearTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];

	if (completionBlock)
	{
		CABasicAnimation *representativeAnimation = [CABasicAnimation animationWithKeyPath:@"not.a.real.key"];
		representativeAnimation.duration = 4.000;
		representativeAnimation.delegate = self;
		[self.layer addAnimation:representativeAnimation forKey:@"M22HomeAnimation"];
		[self.completionBlocksByAnimation setObject:completionBlock forKey:[self.layer animationForKey:@"M22HomeAnimation"]];
	}

	CAKeyframeAnimation *birdBlurOpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
	birdBlurOpacityAnimation.duration = 4.000;
	birdBlurOpacityAnimation.values = @[@(0.000), @(0.000), @(0.000), @(1.000), @(0.000), @(0.000)];
	birdBlurOpacityAnimation.keyTimes = @[@(0.000), @(0.002), @(0.125), @(0.188), @(0.250), @(1.000)];
	birdBlurOpacityAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming, linearTiming, linearTiming];
	birdBlurOpacityAnimation.repeatCount = HUGE_VALF;
	birdBlurOpacityAnimation.beginTime = beginTime;
	birdBlurOpacityAnimation.fillMode = fillMode;
	birdBlurOpacityAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"bird blur__root"] layer] addAnimation:birdBlurOpacityAnimation forKey:@"M22HomeAnimation_Opacity"];

	CAKeyframeAnimation *birdBlurScaleXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.scale.x"];
	birdBlurScaleXAnimation.duration = 4.000;
	birdBlurScaleXAnimation.values = @[@(0.757), @(0.700), @(0.900), @(0.690), @(0.690)];
	birdBlurScaleXAnimation.keyTimes = @[@(0.000), @(0.125), @(0.188), @(0.250), @(1.000)];
	birdBlurScaleXAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming, linearTiming];
	birdBlurScaleXAnimation.repeatCount = HUGE_VALF;
	birdBlurScaleXAnimation.beginTime = beginTime;
	birdBlurScaleXAnimation.fillMode = fillMode;
	birdBlurScaleXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"bird blur__xScale"] layer] addAnimation:birdBlurScaleXAnimation forKey:@"M22HomeAnimation_ScaleX"];

	CAKeyframeAnimation *birdBlurScaleYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.scale.y"];
	birdBlurScaleYAnimation.duration = 4.000;
	birdBlurScaleYAnimation.values = @[@(0.771), @(0.720), @(0.920), @(0.720), @(0.720)];
	birdBlurScaleYAnimation.keyTimes = @[@(0.000), @(0.125), @(0.188), @(0.250), @(1.000)];
	birdBlurScaleYAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming, linearTiming];
	birdBlurScaleYAnimation.repeatCount = HUGE_VALF;
	birdBlurScaleYAnimation.beginTime = beginTime;
	birdBlurScaleYAnimation.fillMode = fillMode;
	birdBlurScaleYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"bird blur__yScale"] layer] addAnimation:birdBlurScaleYAnimation forKey:@"M22HomeAnimation_ScaleY"];

	CAKeyframeAnimation *boltBlurOpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
	boltBlurOpacityAnimation.duration = 4.000;
	boltBlurOpacityAnimation.values = @[@(0.000), @(0.000), @(0.000), @(1.000), @(0.000), @(0.000)];
	boltBlurOpacityAnimation.keyTimes = @[@(0.000), @(0.002), @(0.250), @(0.312), @(0.375), @(1.000)];
	boltBlurOpacityAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming, linearTiming, linearTiming];
	boltBlurOpacityAnimation.repeatCount = HUGE_VALF;
	boltBlurOpacityAnimation.beginTime = beginTime;
	boltBlurOpacityAnimation.fillMode = fillMode;
	boltBlurOpacityAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"bolt blur__root"] layer] addAnimation:boltBlurOpacityAnimation forKey:@"M22HomeAnimation_Opacity"];

	CAKeyframeAnimation *boltBlurScaleXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.scale.x"];
	boltBlurScaleXAnimation.duration = 4.000;
	boltBlurScaleXAnimation.values = @[@(0.837), @(0.780), @(0.980), @(0.780), @(0.780)];
	boltBlurScaleXAnimation.keyTimes = @[@(0.000), @(0.250), @(0.312), @(0.375), @(1.000)];
	boltBlurScaleXAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming, linearTiming];
	boltBlurScaleXAnimation.repeatCount = HUGE_VALF;
	boltBlurScaleXAnimation.beginTime = beginTime;
	boltBlurScaleXAnimation.fillMode = fillMode;
	boltBlurScaleXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"bolt blur__xScale"] layer] addAnimation:boltBlurScaleXAnimation forKey:@"M22HomeAnimation_ScaleX"];

	CAKeyframeAnimation *boltBlurScaleYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.scale.y"];
	boltBlurScaleYAnimation.duration = 4.000;
	boltBlurScaleYAnimation.values = @[@(0.760), @(0.700), @(0.900), @(0.690), @(0.690)];
	boltBlurScaleYAnimation.keyTimes = @[@(0.000), @(0.250), @(0.312), @(0.375), @(1.000)];
	boltBlurScaleYAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming, linearTiming];
	boltBlurScaleYAnimation.repeatCount = HUGE_VALF;
	boltBlurScaleYAnimation.beginTime = beginTime;
	boltBlurScaleYAnimation.fillMode = fillMode;
	boltBlurScaleYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"bolt blur__yScale"] layer] addAnimation:boltBlurScaleYAnimation forKey:@"M22HomeAnimation_ScaleY"];

	CAKeyframeAnimation *starBlurOpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
	starBlurOpacityAnimation.duration = 4.000;
	starBlurOpacityAnimation.values = @[@(0.000), @(1.000), @(0.000), @(0.000)];
	starBlurOpacityAnimation.keyTimes = @[@(0.000), @(0.062), @(0.125), @(1.000)];
	starBlurOpacityAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming];
	starBlurOpacityAnimation.repeatCount = HUGE_VALF;
	starBlurOpacityAnimation.beginTime = beginTime;
	starBlurOpacityAnimation.fillMode = fillMode;
	starBlurOpacityAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"star blur__root"] layer] addAnimation:starBlurOpacityAnimation forKey:@"M22HomeAnimation_Opacity"];

	CAKeyframeAnimation *starBlurScaleXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.scale.x"];
	starBlurScaleXAnimation.duration = 4.000;
	starBlurScaleXAnimation.values = @[@(0.850), @(1.000), @(0.850), @(0.850)];
	starBlurScaleXAnimation.keyTimes = @[@(0.000), @(0.062), @(0.125), @(1.000)];
	starBlurScaleXAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming];
	starBlurScaleXAnimation.repeatCount = HUGE_VALF;
	starBlurScaleXAnimation.beginTime = beginTime;
	starBlurScaleXAnimation.fillMode = fillMode;
	starBlurScaleXAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"star blur__xScale"] layer] addAnimation:starBlurScaleXAnimation forKey:@"M22HomeAnimation_ScaleX"];

	CAKeyframeAnimation *starBlurScaleYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.scale.y"];
	starBlurScaleYAnimation.duration = 4.000;
	starBlurScaleYAnimation.values = @[@(0.780), @(0.930), @(0.780), @(0.780)];
	starBlurScaleYAnimation.keyTimes = @[@(0.000), @(0.062), @(0.125), @(1.000)];
	starBlurScaleYAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming];
	starBlurScaleYAnimation.repeatCount = HUGE_VALF;
	starBlurScaleYAnimation.beginTime = beginTime;
	starBlurScaleYAnimation.fillMode = fillMode;
	starBlurScaleYAnimation.removedOnCompletion = removedOnCompletion;
	[[self.viewsByName[@"star blur__yScale"] layer] addAnimation:starBlurScaleYAnimation forKey:@"M22HomeAnimation_ScaleY"];
}

- (void)removeM22HomeAnimation
{
	[self.layer removeAnimationForKey:@"M22HomeAnimation"];
	[[self.viewsByName[@"bird blur__root"] layer] removeAnimationForKey:@"M22HomeAnimation_Opacity"];
	[[self.viewsByName[@"bird blur__xScale"] layer] removeAnimationForKey:@"M22HomeAnimation_ScaleX"];
	[[self.viewsByName[@"bird blur__yScale"] layer] removeAnimationForKey:@"M22HomeAnimation_ScaleY"];
	[[self.viewsByName[@"bolt blur__root"] layer] removeAnimationForKey:@"M22HomeAnimation_Opacity"];
	[[self.viewsByName[@"bolt blur__xScale"] layer] removeAnimationForKey:@"M22HomeAnimation_ScaleX"];
	[[self.viewsByName[@"bolt blur__yScale"] layer] removeAnimationForKey:@"M22HomeAnimation_ScaleY"];
	[[self.viewsByName[@"star blur__root"] layer] removeAnimationForKey:@"M22HomeAnimation_Opacity"];
	[[self.viewsByName[@"star blur__xScale"] layer] removeAnimationForKey:@"M22HomeAnimation_ScaleX"];
	[[self.viewsByName[@"star blur__yScale"] layer] removeAnimationForKey:@"M22HomeAnimation_ScaleY"];
}

- (void)animationDidStop:(CAAnimation *)anim finished:(BOOL)flag
{
	void (^completion)(BOOL) = [self.completionBlocksByAnimation objectForKey:anim];
	[self.completionBlocksByAnimation removeObjectForKey:anim];
	if (completion)
	{
		completion(flag);
	}
}

- (void)removeAllAnimations
{
	for (UIView *view in self.viewsByName.allValues)
	{
		[view.layer removeAllAnimations];
	}
	[self.layer removeAnimationForKey:@"M22HomeAnimation"];
}

@end